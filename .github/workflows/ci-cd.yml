name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: pytest -v tests/test_todo_app.py

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: docker build -t todo-app .

      - name: Tag Docker image
        run: docker tag todo-app:latest ${{ secrets.ECR_REGISTRY }}:latest

      - name: Push Docker image
        run: docker push ${{ secrets.ECR_REGISTRY }}:latest

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$EC2_SSH_KEY" > ~/.ssh/key.pem
          chmod 600 ~/.ssh/key.pem
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/key.pem $EC2_USER@$EC2_HOST << 'EOF'
            docker pull ${{ secrets.ECR_REGISTRY }}:latest
            docker stop todo-app || true
            docker rm todo-app || true
            docker run -d --name todo-app -p 80:5000 ${{ secrets.ECR_REGISTRY }}:latest
          EOF
